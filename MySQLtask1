3.数据库基础知识


1.数据库定义
    数据库：保存有组织的数据的容器（通常是一个文件或一组文

件）。



关系型数据库


二维表



4.行
    表中的一个记录

5.列
    表中的一个字段。所有表都是由一个或多个列组成的。


6.主键
    一列（或一组列），其值能够唯一标识表中的每一行。如ID等

。




7.外键

4.MySQL数据库管理系统
   数据库
   数据表
   视图
   存储过程





1.2 MySQL 基础 （一）- 查询语句

2. SQL是什么？MySQL是什么？

    SQL是结构化查询语言，是一种专门用来与数据库沟通的语言

。
    MySQL


3. 查询语句 SELECT FROM 

    SELECT prod_name FROM Products;

    语句解释；

	利用SELECT语句从Products表中检索一个
    名为pro_name的列！！。
	所需的列名写在SELECT关键字之后，FROM关     键字指

出从哪个表中检索数据。


    检索多个列
	SELECT prod_id,prod_name,prod_price
  	FROM Products;

        注意逗号！

    检索所有列：
	SELECT * 
	FROM Products;

    检索不同的值：即只输出某列所有行中的不同（具有唯一性）

的值：
	SELECT DISTINCT vend_id
	FROM Products;

    限制结果：
	SELECT prod_name
	FROM Products
	LIMIT 5 ;     只输出不超过5行的数据。

	
	SELECT pro_name
	FROM Products
	LIMIT 4 OFFSET 5 ;  输出从第6行开始的不超过4行的数

据。（可以写成LIMIT 5,4 ）    


	
	
    2.去重语句
	


	


    前N个语句





    CASE...END判断语句





4. 筛选语句 WHERE 

	1.使用WHERE子句
	
    SECELT prod_name,prod_price
    FROM Products
    WHERE prod_price = 3.49;   （这条语句从 products 表中

检索两个列，但不返回所有行，只返回prod_price 值为 3.49 的

行）

	2.WHERE子句操作符

  

  操 作 符     说 明      操 作 符    说 明

    =           等于          >       大于

   < >         不等于        >=      大于等于

   !=          不等于        !>       不大于

    <           小于      BETWEEN   在指定的两个值之间 
   <=          小于等于    IS NULL   为NULL值
   !< 不小于
                            

	2.1 范围值检查（BETWEEN）

    SELECT prod_name, prod_price 
    FROM Products 
    WHERE prod_price BETWEEN 5 AND 10;（使用BETWEEN时，必

须指定两个值-- 所需范围的低端值和高端值。用AND隔开。

BETWEEN匹配范围中的所有值，包括指定的开始值和结束值。）


 	2.2 空值检查（ IS NULL）

	SELECT cust_name
	FROM Customers
	WHERE cust_email IS NULL; （不是  = NULL 而是  IS 

NULL）




	2.3 组合WHERE子句（AND 和 OR ）

	AND子句：
	
	SELECT prod_id, prod_price, prod_name
	FROM Products 
        WHERE vend_id = 'DLL01' AND prod_price <= 4;   （

表示选择vend_is是DLL01并且 prod_price小于等于4）
	
	 
	OR 子句：

	SELECT prod_name, prod_price 
	FROM Products 
	WHERE vend_id = 'DLL01' OR vend_id = ‘BRS01’;（

表示满足其一即可检索出来）


	2.4 求值顺序
	
	组合AND 和OR 子句，AND的优先级更高，但是建议使用小

括号：
 
	SELECT prod_name, prod_price 
	FROM Products 
	WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') 
 	AND prod_price >= 10;


	2.5 IN操作符

	
	SELECT prod_name, prod_price 
	FROM Products 
	WHERE vend_id IN ( 'DLL01', 'BRS01' ) 
	ORDER BY prod_name;（检索出vend_id

是‘DLL01’和‘BRS01’的所有值，与OR子句相当，即WHERE 

vend_id = 'DLL01' OR vend_id = 'BRS01' ）


     	2.6 NOT 操作符（用于否定其后所跟的任何条件）


	SELECT prod_name 
	FROM Products 
	WHERE NOT vend_id = 'DLL01' 
	ORDER BY prod_name; （匹配vend_id不是‘DLL01’的所

有数据）
 
	同：

	SELECT prod_name 
	FROM Products 
	WHERE vend_id <> 'DLL01' 
	ORDER BY prod_name;







    语句解释







    运算符/通配符/操作符

	通配符：用来匹配值的一部分的特殊字符。
		通配符搜索只能用于文本字段（字符串），非文

本数据类型字段不能使用通配符搜索。
		
	
	1.LIKE操作符
	
	
	1.1百分号（%）通配符


	    %表示任何字符出现任意次数（0个或多个）。例如，

为了找出所有以词Fish起头的产品，可用一下SELECT语句：

	SELECT prod_id,prod_name
	FROM Products
	WHERE prod_name LIKE 'Fish%';


	    使用多个%通配符：

	SELECT prod_id, prod_name 
	FROM Products 
	WHERE prod_name LIKE '%bean bag%';  (表示匹配包含

bean bag的值，不论它之前或之后出现什么字符。)



	    通配符在中间：

	SELECT prod_name 
	FROM Products 
	WHERE prod_name LIKE 'F%y';   (表示匹配以F开头，以

y结尾的所有字符段)


	1.2 下划线（_）通配符   只匹配单个字符 



	SELECT prod_id，prod_name
	FROM Products
	WHERE prod_name LIKE ‘__ inch teddy bear’; （这

是两个_，匹配前面是两个字符的内容，而%都匹配出来）



	SELECT prod_id，prod_id
	FROM Products
	WHERE prod_name LIKE ‘% inch teddy bear’;



	1.3 方括号[ ] 通配符   用来指定一个字符集，它必须

匹配指定位置（通配符的位置）的一个字符。 （集合的概念，匹

配 [ ]内任意一个字符 。）


	SELECT  cust_contact
	FROM Customers
	WHERE cust_contact LIKE '[JM]%'   (表示匹配以J或M

开头的任意字符，可以用 ^ （托字节）来否定，如

	SELECT cust_contact 
	FROM Customers 
	WHERE cust_contact LIKE '[^JM]%' 
	ORDER BY cust_contact;       表示匹配以J和M之外的

任意字符起头的字符串)

	
  

    5. 分组语句 GROUP BY


	SELECT vend_id, COUNT(*) AS num_prods 
	FROM Products 
	GROUP BY vend_id; 

  输出：
	vend_id num_prods 
	------- --------- 
	BRS01      3 
	DLL01      4 
	FNG01      2       （表示按vend_id分组，统计其出现

的次数或行数）



除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 

子句中给出。 即例子中的 vend_id 和 GROUP BY 中的vend_id

GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前

。



      聚集函数  （汇总数据）  对某些行运行的函数，计算并返

回一个值。


                    SQL聚集函数
	函 数 				说 明

	AVG() 			  返回某列的平均值

	COUNT()			  返回某列的行数

	MAX()  			  返回某列的最大值

	MIN()              	  返回某列的最小值

	SUM()			  返回某列值之和
	

      1. AVG（）函数  （只用于单个列，忽略NULL值）

	SELECT AVG(prod_price) AS avg_price   （avg_price

是AS 语句生成的别名）
	FROM Products;   （计算prod_price列的平均值）

	SELECT AVG(prod_price) AS avg_price
	FROM Products
	WHERE vend_id = 'DLL01' (返回特定行或列的平均值，

WHERE语句)


      2.COUNT()函数
   
	2.1 COUNT（*） 对表中行的数目进行计数，不管表列中

包含的是空值（NULL）还是非空值。

	SELECT COUNT(*) AS num_cust
	FROM Customers;


	2.2 COUNT（column）对特定列中具有值的行进行计数，

忽略NULL值。

	
  	SELECT COUNT(cust_email) AS num_cust
	FROM Customers;   (只对具有电子邮箱的客户计数)


      3.MAX（）函数  返回指定列的最大值，要求指定列名！

	SELECT MAX（prod_price） AS max_price
	FROM Products;


      4. MIN()函数  返回指定列的最小值，同MAX（）函数	



      5.SUM（）函数  返回指定列值的和，也可用来合计:

 	SELECT SUM(quantity) AS items_ordered
	FROM OrderItems
	WHERE order_num = 2005;  （可以用WHERE指定条件）

	SELECT SUM(item_price*quantity) AS total_price
	FROM OrderItems
	WHERE order_num = 2005; 











      语句解释




      HAVING子句     （过滤分组  结合GROUP  BY）

	
	SELECT cust_id, COUNT(*) AS orders 
	FROM Orders 
	GROUP BY cust_id 
	HAVING COUNT(*) >= 2; （表示数量在两个及两个以上的

数据）。








6. 排序语句 ORDER BY （是位于最后的子句）

	SELECT prod_name
	FROM Products
	ORDER  BY prod_name;  表示对prod_name列以字母顺序

排序。
	
    2.按多个列排序 

	SELECT prod_id, prod_price, prod_name
	FROM Products 
	ORDER BY prod_price, prod_name; 列名用逗号隔开 。

    prod_id prod_price   prod_name 
    ------- ----------  -------------------- 
    BNBG02  3.4900      Bird bean bag toy 
    BNBG01  3.4900      Fish bean bag toy 
    BNBG03  3.4900      Rabbit bean bag toy 
    RGAN01  4.9900      Raggedy Ann 
    BR01    5.9900      8 inch teddy bear 
    BR02    8.9900      12 inch teddy bear 
    RYL01   9.4900      King doll 
    RYL02   9.4900      Queen doll 
    BR03    11.9900     18 inch teddy bear	
 
    3.按列位置排序

	SELECT prod_id, prod_price, prod_name 
	FROM Products 
	ORDER BY 2, 3; （2 ，3代指第二、三列）
	

    4.指定排序方向 （降序）

	SELECT prod_id,prod_price,prod_name
	FROM Products
	ORDER BY prod_price DESC;(按价格降序的方式进行排序

)


    打算按多个列排序怎么办？包含降序


	SELECT prod_id, prod_price, prod_name 
	FROM Products 
	ORDER BY prod_price DESC, prod_name;（价格降序排列

，而name还是升序；如果需要对多个列进行降序排序，需要对每一

列指定DESC关键字。）







    5.语句解释



    正序、逆序







7. 函数

    7.1时间函数

	根据年份处理：

	SELECT order_num 
	FROM Orders
	WHERE YEAR(order_data) = 2012;  (选择时间中年份是

2012的数据)



    7.2数值函数

	函 数         说 明

        ABS()         返回一个数的绝对值

        COS()         返回一个角度的余弦

        EXP()         返回一个数的指数值

        PI()          返回圆周率

       SIN()          返回一个角度的正弦

       SQRT()         返回一个数的平方根

       TAN()          返回一个角度的正切





    字符串函数

	表8-2     常用的文本处理函数

       函 数                            说 明

     LEFT()（或使用子字符串函数） 返回字符串左边的字符

    LENGTH()（也使用DATALENGTH()或LEN()） 返回字符串的长度

    LOWER()（Access使用LCASE()）   将字符串转换为小写

    LTRIM()                     去掉字符串左边的空格

    RIGHT()（或使用子字符串函数） 返回字符串右边的字符

    RTRIM()                   去掉字符串右边的空格

    SOUNDEX()                 返回字符串的SOUNDEX值

  UPPER()（Access使用UCASE()） 将字符串转换为大写





8. SQL注释
 	
   	SELECT prod_name -- 这是一条注释
	FROM Products;
	
	# 这是一条注释
	SELECT prod_name 
	FROM Products;	

	/* SELECT prod_name, vend_id 
	FROM Products; */ 
	SELECT prod_name 
	FROM Products;
9. SQL代码规范
    [SQL编程格式的优化建议] 


#作业#
项目一：查找重复的电子邮箱（难度：简单）
创建 email表，并插入如下三行数据
+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+

编写一个 SQL 查询，查找 Email 表中所有重复的电子邮箱。
根据以上输入，你的查询应返回以下结果：
+---------+
| Email   |
+---------+
| a@b.com |
+---------+
说明：所有电子邮箱都是小写字母。

-- 创建表
CREATE TABLE email (
ID INT NOT NULL PRIMARY KEY,
Email VARCHAR(255)
);
-- 插入数据
INSERT INTO email VALUES('1','a@b.com');
INSERT INTO email VALUES('2','c@d.com');
INSERT INTO email VALUES('3','a@b.com');


SELECT Email  
FROM email 
GROUP BY Email 
HAVING count(Email)>1;





项目二：查找大国（难度：简单）
创建如下 World 表
+-----------------+------------+------------+--------------+---------------+
| name            | continent  | area       | population   | gdp           |
+-----------------+------------+------------+--------------+---------------+
| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |
| Albania         | Europe     | 28748      | 2831741      | 12960000      |
| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |
| Andorra         | Europe     | 468        | 78115        | 3712000       |
| Angola          | Africa     | 1246700    | 20609294     | 100990000     |
+-----------------+------------+------------+--------------+---------------+
如果一个国家的面积超过300万平方公里，或者(人口超过2500万并且gdp超过2000万)，那么这个国家就是大国家。
编写一个SQL查询，输出表中所有大国家的名称、人口和面积。
例如，根据上表，我们应该输出:
+--------------+-------------+--------------+
| name         | population  | area         |
+--------------+-------------+--------------+
| Afghanistan  | 25500100    | 652230       |
| Algeria      | 37100000    | 2381741      |
+--------------+-------------+--------------+

-- 创建表
CREATE TABLE World (
name VARCHAR(50) NOT NULL,
continent VARCHAR(50) NOT NULL,
area INT NOT NULL,
population INT NOT NULL,
gdp INT NOT NULL
);
-- 插入数据
INSERT INTO World
  VALUES('Afghanistan','Asia',652230,25500100,20343000);
INSERT INTO World 
  VALUES('Albania','Europe',28748,2831741,12960000);
INSERT INTO World 
  VALUES('Algeria','Africa',2381741,37100000,188681000);
INSERT INTO World
  VALUES('Andorra','Europe',468,78115,3712000);
INSERT INTO World
  VALUES('Angola','Africa',1246700,20609294,100990000)
  
SELECT name,population,area 
FROM world 
WHERE area>300 OR (area>2500 AND gdp>2000);  
  
  
  
