
1. MySQL表数据类型

    1.1字符串数据类型   （使用单引号）
	
	CHAR  1~255个定长字符串。它的长度必须在创建时规定

	VARCHAR   边长文本

    1.2数值数据类型    （不适用引号）

	INT    4字节整数值
	
	FLOAT（m，d）   单精度浮点数  m总个数，d小数位

	DOUBLE(m,d)	双精度浮点数 m总个数，d小数位 
      如：  设一个字段定义为float(6,3)，如果插入一个数

123.45678,实际数据库里存的是123.457，但总个数还以实际为准

，即6位。整数部分最大是3位，如果插入数12.123456，存储的是

12.1234，如果插入12.12，存储的是12.1200.    
	

    1.3日期和时间数据类型

	DATE    日期值 '2008-12-2'

	TIMESTAMP    时间戳  自动存储记录修改时间

	DATETIME   日期时间  '2008-12-2 22:06:44'



2. 用SQL语句创建表

	 语句解释   CREATE TABLE 


   	 设定列类型 、大小、约束

	a.新表的名字，在关键字 CREATE TABLE 之后给出；

  	b.表列的名字和定义，用逗号分隔；

	
	输入：

	CREATE  TABLE Products
	（
	    prod_id     CHAR（10） 定长10     NOT NULL,

 	    vend_id     CHAR(10)              NOT NULL, 

 	    prod_name   CHAR(254)             NOT NULL, 

	    prod_price   DECIMAL(8,2)         NOT NULL, 

 	    prod_desc    VARCHAR(1000)         NULL

	
	）;




 	 设定主键    列中不允许NULL值 即 NOT NULL


3. 用SQL语句向表中添加数据

 	 语句解释

  	INSERT 将行插入（或添加）到数据库表。

	  需要指定表！

 	多种添加方式（指定列名；不指定列名）

 	1.插入完整的行  

	1.1指定列名：

	  INSERT INTO Customers(cust_id, 
 	  			cust_name, 
 				cust_address, 
				cust_city, 
				cust_state, 
 				cust_zip,
 				cust_country, 
 				cust_contact, 
 				cust_email) 
	  VALUES('1000000006', 
 	         'Toy Land', 
 	  	 '123 Any Street', 
	  	 'New York', 
	  	 'NY', 
		 '11111', 
 	 	 'USA', 
 		 NULL, 
 		 NULL);
	
 	1.2 不指定列名 

	  INSERT INTO Customers
	  VALUES（'1000000006', 
 		 'Toy Land', 
	  	 '123 Any Street', 
		 'New York', 
 		 'NY', 
		 '11111', 
 		 'USA', 
 		 NULL, 
 		 NULL);
			

	2. 插入部分的行  （必须要给出列名）


	INSERT INTO Customers(cust_id, 
			      cust_name, 
 			      cust_address, 
 			      cust_city, 
			      cust_state, 
 			      cust_zip, 
 			      cust_country) 

	VALUES('1000000006', 
 		'Toy Land', 
		 '123 Any Street', 
 		'New York', 
 		'NY', 
		'11111', 
		 'USA');	
	
	  
	3.插入检索出的数据

	INSERT INTO Customers(cust_id, 
 			      cust_contact, 
 			      cust_email, 
 			      cust_name, 
			      cust_address, 
			      cust_city, 
 			      cust_state, 
 			      cust_zip, 
 			      cust_country) 

	SELECT cust_id, 
 	       cust_contact, 
	       cust_email, 
 	       cust_name, 
	       cust_address, 
	       cust_city, 
 	       cust_state, 
	       cust_zip, 
	       cust_country 
	FROM CustNew;    （使用INSERT SELECT从表CustNew中

将所有数据导入Customers。）



4. 用SQL语句删除表

 	 语句解释
  	 DELETE    （可选择删除部分数据）
	
	DELETE FROM table_name 
	[WHERE Clause];
	

 	 DROP

	DROP TABLE CustCopy;

                              
 	 TRUNCATE   （保留表而清空内容）


 	不同方式的区别


	1、在速度上，一般来说，drop> truncate > delete。

	2、在使用drop和truncate时一定要注意，虽然可以恢复

，但为了减少麻烦，还是要慎重。

	3、如果想删除部分数据用delete，注意带上where子句，

回滚段要足够大；

	4、如果想删除表，当然用drop； 

	5、如果想保留表而将所有数据删除，如果和事务无关，

用truncate即可







5. 用SQL语句修改表

	 修改列名

	ALTER table_name CHANGE old_col_name   

new_col_name  varchar（） 数据类型; 



	修改表中数据

	UPDATE Customers 
	SET     cust_contact = 'Sam Roberts', 
 		cust_email = 'sam@toyland.com' 
	WHERE cust_id = '1000000006';




  	 删除行  

	DELETE FROM Customers 

	WHERE cust_id = '1000000006';  （删除指定行）




 	 删除列

	ALTER TABLE Vendors 
	DROP COLUMN vend_phone;



 	 新建列  （增加列）

	ALTER TABLE Vendors 
	ADD vend_phone CHAR(20);（这条语句给 Vendors 表增

加一个名为 vend_phone 的列，其数据类型为 CHAR。）





 	新建行
	
	INSERT INTTO TABLE_Name values();



## **#作业#**
### 项目三：超过5名学生的课（难度：简单）
创建如下所示的courses 表 ，有: student (学生) 和 class (课

程)。
例如,表:
+---------+------------+
| student | class? ? ? |
+---------+------------+
| A? ? ? ?| Math? ? ? ?|
| B? ? ? ?| English? ? |
| C? ? ? ?| Math? ? ? ?|
| D? ? ? ?| Biology? ? |
| E? ? ? ?| Math? ? ? ?|
| F? ? ? ?| Computer? ?|
| G? ? ? ?| Math? ? ? ?|
| H? ? ? ?| Math? ? ? ?|
| I? ? ? ?| Math? ? ? ?|
| A? ? ? | Math? ? ? ?|
+---------+------------+

编写一个 SQL 查询，列出所有超过或等于5名学生的课。
应该输出:
+---------+
| class? ?|
+---------+
| Math? ? |
+---------+
Note:
学生在每个课中不应被重复计算。

SELECT class, COUNT(*)  
from courses 
GROUP BY class 
HAVING COUNT(*) >=5;






### 项目四：交换工资（难度：简单）
创建一个 salary表，如下所示，有m=男性 和 f=女性的值 。
例如:
| id | name | sex | salary |
|----|------|-----|--------|
| 1? | A? ? | m? ?| 2500? ?|
| 2? | B? ? | f? ?| 1500? ?|
| 3? | C? ? | m? ?| 5500? ?|
| 4? | D? ? | f? ?| 500? ? |

交换所有的 f 和 m 值(例如，将所有 f 值更改为 m，反之亦然)

。要求使用一个更新查询，并且没有中间临时表。
运行你所编写的查询语句之后，将会得到以下表:
| id | name | sex | salary |
|----|------|-----|--------|
| 1? | A? ? | f??| 2500? ?|
| 2? | B? ? | m? ?| 1500? ?|
| 3? | C? ? | f? ?| 5500? ?|
| 4? | D? ? | m? ?| 500? ? |

UPDATE  salary
SET sex= 
    CASE sex
    WHEN 'm'
    THEN 'f'
    ELSE 'm'
END;






### 项目五：有趣的电影 （难度：简单）
某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院

特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着

影评和相关电影描述。

作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有

影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果

请按等级 rating 排列。

例如，下表 cinema:

+---------+-----------+--------------+-----------+
|? ?id? ? | movie? ? ?|? description |? rating? ?|
+---------+-----------+--------------+-----------+
|? ?1? ? ?| War? ? ? ?|? ?great 3D? ?|? ?8.9? ? ?|
|? ?2? ? ?| Science? ?|? ?fiction? ? |? ?8.5? ? ?|
|? ?3? ? ?| irish? ? ?|? ?boring? ? ?|? ?6.2? ? ?|
|? ?4? ? ?| Ice song? |? ?Fantacy? ? |? ?8.6? ? ?|
|? ?5? ? ?| House card|? ?Interesting|? ?9.1? ? ?|
+---------+-----------+--------------+-----------+
对于上面的例子，则正确的输出是为：

+---------+-----------+--------------+-----------+
|? ?id? ? | movie? ? ?|? description |? rating? ?|
+---------+-----------+--------------+-----------+
|? ?5? ? ?| House card|? ?Interesting|? ?9.1? ? ?|
|? ?1? ? ?| War? ? ? ?|? ?great 3D? ?|? ?8.9? ? ?|
+---------+-----------+--------------+-----------+

SELECT id,movie,description,rating
FROM cinema
WHERE NOT description = 'boring' AND id%2 = 1 
ORDER BY rating DESC;



## **2.2 MySQL 基础 （三）- 表联结****#学习内容#**


* MySQL别名


* INNER JOIN  （显式内联结）
 	
	语法：SELECT 字段列表 FROM 表名1  [INNER] JOIN  表

2 ON 条件；

* LEFT JOIN （左外联结）
	
	语法： SELECT  字段列表 FROM 表1 LEFT JOIN 表2 ON 

条件;
	
	 查询的是左表所有数据及其交集部分。



* RIGHT JOIN （右外联结）

	语法： SELECT  字段列表 FROM 表1 RIGHT JOIN 表2 ON 

条件;
	
	 查询的是右表所有数据及其交集部分。


* CROSS JOIN


* 自连接



* UNION




* 以上几种方式的区别和联系








## **#作业#**
### 项目六：组合两张表 （难度：简单）
在数据库中创建表1和表2，并各插入三行数据（自己造）
表1:?Person
+-------------+---------+
| 列名         | 类型     |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId 是上表主键

表2:?Address
+-------------+---------+
| 列名         | 类型    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId 是上表主键

编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，

都需要基于上述两表提供?person 的以下信息：FirstName, 

LastName, City, State



ELECT FirstName, LastName, City, State
FROM Address, Person
WHERE person.Personid = address.Personid;







### 项目七：删除重复的邮箱（难度：简单）
编写一个 SQL 查询，来删除?email?表中所有重复的电子邮箱，重

复的邮箱里只保留?**Id?***最小?*的那个。
+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
Id 是这个表的主键。
例如，在运行你的查询语句之后，上面的?Person表应返回以下几

行:
+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | a@b.com |
| 2  | c@d.com  |
+----+------------------+

DELETE p1 FROM Person p1,
    Person p2
WHERE
    p1.Email = p2.Email AND p1.Id > p2.Id




### 项目八：从不订购的客户 （难度：简单）
某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 

查询，找出所有从不订购任何东西的客户。

Customers 表：

+----+-------+
| Id | Name? |
+----+-------+
| 1? | Joe? ?|
| 2? | Henry |
| 3? | Sam? ?|
| 4? | Max? ?|
+----+-------+
Orders 表：

+----+------------+
| Id | CustomerId |
+----+------------+
| 1? | 3? ? ? ? ? |
| 2? | 1? ? ? ? ? |
+----+------------+
例如给定上述表格，你的查询应返回：

+-----------+
| Customers |
+-----------+
| Henry? ? ?|
| Max? ? ? ?|
+-----------+



SELECT Customers.name AS Customers
FROM Customers
	LEFT JOIN Orders ON Customers.id = 

Orders.CustomerId
WHERE orders.CustomerId IS NULL;







### 项目九：超过经理收入的员工（难度：简单）
Employee 表包含所有员工，他们的经理也属于员工。每个员工都

有一个 Id，此外还有一列对应员工的经理的 Id。

+----+-------+--------+-----------+
| Id | Name? | Salary | ManagerId |
+----+-------+--------+-----------+
| 1? | Joe? ?| 70000? | 3? ? ? ? ?|
| 2? | Henry | 80000? | 4? ? ? ? ?|
| 3? | Sam? ?| 60000? | NULL? ? ? |
| 4? | Max? ?| 90000? | NULL? ? ? |
+----+-------+--------+-----------+
给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超

过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入

超过他的经理的员工。

+----------+
| Employee |
+----------+
| Joe? ? ? |
+----------+



SELECT e1.name AS Employee
FROM Employee e1
	LEFT JOIN Employee e2 ON e1.ManagerId = e2.id
WHERE e1.salary > e2.Salary;




# 
**【任务说明】**
本次作业以及之后的都需要小伙伴自己创建表和插入数据啦。就当

表操作的练习。请注意语句规范，可参考上次作业的参考答案。
表联结是SQL语句核心部分。因为在正式业务中必然会涉及到多表

之间的数据调用。所以大家务必完全理解吃透这部分的内容。
祝大家学习开心。:-)
# 
